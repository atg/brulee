/* The Brulee lexer is written in Ragel, then compiled to C. We then call these using Haskell's FFI. This let's us avoid parsec's (relatively) weak lexing support */

#import "Lexer.h"

void brulee_lex_emit(unsigned code, std::vector<brulee_token>& tokens, unsigned char* p, unsigned char* ts, unsigned char* te)
{
	brulee_token t;
	t.code = code;
	
	t.payload = malloc((te - ts + 1) * sizeof(unsigned char));
	t.payload[te - ts] = 0;
	memcpy(t.payload, ts, te - ts);
	
	t.rangeStart = ts - p;
	t.rangeLength = te - ts;
	
	tokens.push_back(t);
}

#define e(t) brulee_lex_emit(t, tokens, ts, te)

%%{
	machine BruleeLexer;
	write data;
	
	alphtype unsigned char;
	
	ndigit = "0" | ([1-9] digit*);
	
	main := |*
		
		# Keywords
		"if" { e(IF); };
		"then" { e(THEN); };
		"else" { e(ELSE); };
		
		"for" { e(FOR); };
		"in" { e(IN); };
		"while" { e(WHILE); };
		"give" { e(GIVE); };
		"break" { e(BREAK); };
		"continue" { e(CONTINUE); };
		"switch" { e(SWITCH); };
		"case" { e(CASE); };
		
		"do" { e(DO); };
		"async" { e(ASYNC); };
		"sync" { e(SYNC); };		
		
		"return" { e(RETURN); };
		
		"has" { e(HAS); };
	
		"class" { e(CLASS); };
		"property" { e(PROPERTY); };
		
		"private" { e(PRIVATE); };
		"readonly" { e(READONLY); };
		"assign" { e(ASSIGN); };
		"retain" { e(RETAIN); };
		"copy" { e(COPY); };
		"nonatomic" { e(NONATOMIC); };
		
		"weak" { e(WEAK); };
		"strong" { e(STRONG); };
		
		"static" { e(STATIC); }
		"volatile" { e(VOLATILE); }
		"const" { e(CONST); }
		
		"alias" { e(ALIAS); }
		"type" { e(TYPE); }
		"data" { e(DATA); }
		"enum" { e(ENUM); }
		
		
		# Numerics
		ndigits { e(INTEGER); };
		ndigits "." ndigits { e(DECIMAL); };
		
		"0o" ndigits { e(OCTAL_INT); };
		"0o" ndigits "." digit+ { e(OCTAL_DECIMAL) };
				
		"0x" ndigits { e(HEX_INT); };
		"0x" ndigits "." digit+ { e(HEX_DECIMAL) };
		
		"0b" ndigits { e(BINARY_INT); };
		"0b" ndigits "." digit+ { e(BINARY_DECIMAL) };
		
		("0" [oxb])? "0" digit+ { lexerror("lex.leading-zeroes"); };
		("0" [oxb])? "0" digit+ "." digit+ { lexerror("lex.leading-zeroes"); };
		
		
		# Strings
		
		## TODO: Decide on string literal formats
		
		"```" any* :>> "```" { e(OBJC); };
		"`" any* :>> "`" { e(OBJC); };
		
		
		# Punctuation
		"<-" { e(LT_DASH); };
		"->" { e(DASH_GT); };
		"=>" { e(EQ_GT); };
		
		"<=" { e(LT_EQ); };
		">=" { e(GT_EQ); };
		"<" { e(LT); };
		">" { e(GT); };
		"==" { e(EQ_EQ); };
		"!=" { e(EXCLAIM_EQ); };
		"===" { e(EQ_EQ_EQ); };
		"!==" { e(EXCLAIM_EQ_EQ); };
		
		"+" { e(PLUS); };
		"-" { e(DASH); };
		"*" { e(STAR); };
		"/" { e(SLASH); };
		"mod" { e(MOD); };
		"divides" { e(DIVIDES); };
		"**" { e(STAR_STAR); };
		
		"!" { e(EXCLAIM); };
		"&&" { e(AMP_AMP); };
		"||" { e(BAR_BAR); };
		
		"+comp" { e(PLUS_COMP); };
		"+and" { e(PLUS_AND); };
		"+or" { e(PLUS_OR); };
		"+xor" { e(PLUS_XOR); };
		"+nand" { e(PLUS_NAND); };
		"+nor" { e(PLUS_NOR); };
		"+implies" { e(PLUS_IMPLIES); };
		"+<<" { e(PLUS_LT_LT); };
		"+>>" { e(PLUS_GT_GT); };
			
		"@" { e(AT); };
		"#" { e(HASH); };
		"$" { e(DOLLAR); };
		"%" { e(PERCENT); };
		"^" { e(CARET); };
		"&" { e(AMP); };
		
		"(" { e(LBRACKET); };
		")" { e(RBRACKET); };
		"[" { e(LSQUARE); };
		"]" { e(RSQUARE); };
		"{" { e(LCURLY); };
		"}" { e(RCURLY); };
		
		"_" { e(UNDERSCORE); };
		"=" { e(EQ); };
		":" { e(COLON); };
		";" { e(SEMICOLON); };
		"\\" { e(BACKSLASH); };
		"|" { e(BAR); };
		"," { e(COMMA); };
		"." { e(DOT); };
		"?" { e(QUESTIONMARK); };
		"~" { e(TILDE); };
		
		
		# Comments
		"--" any+ { e(COMMENT); };
		"//" [^\n\r]+ { e(COMMENT); };
		"#!" [^\n\r]+ { e(COMMENT); };
		
		"/*" any* :>> "*/" { e(COMMENT); };
		
				
		# Identifiers
		"_" { lexerror("lex.single-underscore") };
		([a-zA-Z_][a-zA-Z0-9_\-]+[a-zA-Z0-9_]) | ([a-zA-Z_][a-zA-Z0-9_]*) { e(IDENT); };
		
		any { lexerror("lex.unrecognized-symbol"); };
		
	*|

%%}

void brulee_lex_tokenize(std::string& input, std::vector<brulee_token>& tokens)
{
	//Start
	unsigned char *p = input.c_str();
	
	//End
	unsigned char *pe = p + input.length();
	unsigned char *eof = pe;
		
	//State
	int cs = 0, act, have = 0, curline = 1;
	unsigned char *ts, *te = 0;
	int done = 0;
	
	//Run the machine
	%% write init;
	%% write exec;
	
	//Return the output
	return tokens;
}
